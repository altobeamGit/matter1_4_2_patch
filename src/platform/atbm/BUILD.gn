# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")

import("${chip_root}/src/inet/inet.gni")
import("${chip_root}/src/lib/core/core.gni")
import("${chip_root}/src/platform/device.gni")

assert(chip_device_platform == "atbm")

declare_args() {
  # By default use default/example implementation of CommissionableDataProvider,
  # DeviceAttestationCredentialsProvider and DeviceInstanceInforProvider
  chip_use_factory_data_provider = false
  chip_use_device_info_provider = false
  chip_config_software_version_number = 0
  chip_enable_chipoble = true
  chip_use_secure_cert_dac_provider = false
  chip_use_atbm_ecdsa_peripheral = false
}

defines = [
  "CHIP_CONFIG_SOFTWARE_VERSION_NUMBER=${chip_config_software_version_number}",
  "CHIP_DEVICE_CONFIG_ENABLE_IPV4=${chip_inet_config_enable_ipv4}",
]

static_library("atbm") {
  sources = [
    "../SingletonConfigurationManager.cpp",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "ATBMConfig.cpp",
    "ATBMConfig.h",
    "ATBMUtils.cpp",
    "ATBMUtils.h",
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
    "Logging.cpp",
    "LwIPCoreLock.cpp",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "SystemTimeSupport.cpp",
    "SystemTimeSupport.h",
    "ConnectivityManagerImpl_WiFi.cpp",
    "NetworkCommissioningDriver.cpp",
    "NetworkCommissioningDriver.h",
  ]

  include_dirs = [
    ".",
    "easyflash/inc",
    "easyflash/plugins/types",
    "easyflash/plugins/types/struct2json/inc",
  ]

  deps = [
    "${chip_root}/src/app:app_config",
    "${chip_root}/src/app/common:ids",
    "${chip_root}/src/lib/dnssd:platform_header",
    "${chip_root}/src/platform/logging:headers",
    "${chip_root}/src/setup_payload",
  ]

  public = [
    "${chip_root}/src/credentials/CHIPCert.h",
    "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h",
  ]

  public_deps = [
    "${chip_root}/src/crypto",
    "${chip_root}/src/platform:platform_base",
  ]

  if (chip_config_memory_management == "platform") {
    if (chip_memory_alloc_mode == "internal") {
      sources += [ "CHIPMem-PlatformInternal.cpp" ]
    } else if (chip_memory_alloc_mode == "external") {
      sources += [ "CHIPMem-PlatformExternal.cpp" ]
    } else {
      sources += [ "CHIPMem-PlatformDefault.cpp" ]
    }
  }

  if (chip_enable_chipoble) {
    sources += [
      "BLEManagerImpl.h",
      "nimble/BLEManagerImpl.cpp",
    ]
  }
  if (chip_mdns == "platform") {
    sources += [
      "DnssdImpl.cpp",
      "DnssdImpl.h",
    ]
  }
  if (chip_mdns == "minimal") {
    sources += [ "ATBMEndpointQueueFilter.h" ]
  }
  if (chip_enable_ota_requestor) {
    sources += [
      "OTAImageProcessorImpl.cpp",
      "OTAImageProcessorImpl.h",
    ]
  }
  if (chip_use_factory_data_provider) {
    sources += [
      "ATBMFactoryDataProvider.cpp",
      "ATBMFactoryDataProvider.h",
    ]
  }
  if (chip_use_device_info_provider) {
    sources += [
      "ATBMDeviceInfoProvider.cpp",
      "ATBMDeviceInfoProvider.h",
    ]
  }
  if (chip_use_secure_cert_dac_provider) {
    sources += [
      "ATBMSecureCertDACProvider.cpp",
      "ATBMSecureCertDACProvider.h",
    ]
  }
  if (chip_use_atbm_ecdsa_peripheral) {
    sources += [
      "ATBMCHIPCryptoPAL.cpp",
      "ATBMCHIPCryptoPAL.h",
    ]
  }

  cflags_cc = [
    "-Wno-unused-but-set-variable",
    "-Wno-unused-variable",
    "-Wno-unused-parameter",
    "-Wno-format",
    "-Wno-format-nonliteral",
    "-Wno-format-security",
    "-fpermissive",
    "-Wconversion",
  ]
}
